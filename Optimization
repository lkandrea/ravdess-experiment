{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Optimization","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyO2rC2pq7E8ozMGOHfJCIwb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"scxCkFNf341Q","colab_type":"text"},"source":["# Equation Visualization\n","\n","![Equation Visualization](https://drive.google.com/uc?id=12SL1ehi8X35QiaSLMPzjWY7Pg69C7Idi)\n","\n","- Find global maximum & globa minimum\n","- Equation `9 * x * sin(x)`\n","- 0 < x < 24\n","\n","Source: \n","1. Equation visualization helper: http://www.abhortsoft.hu/functionvisualizer/functionvisualizer.html\n","\n","\n","Notes: This will use hill climbing optimization"]},{"cell_type":"code","metadata":{"id":"M74NSntH5acf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":697},"outputId":"529469d9-14b6-4da0-f2e6-c8cc08f089c4","executionInfo":{"status":"ok","timestamp":1587446584484,"user_tz":-420,"elapsed":1704,"user":{"displayName":"Andrea Lk","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1Ci4EqvOrcxK36QNYqCMFFGpFXmtJJgq27B4B_A=s64","userId":"08762831265205816868"}}},"source":["import math\n","import random\n","\n","upper_boundary = 24\n","lower_boundary = 0\n","precision = 0.001\n","\n","def f(x):\n","    # Equation Function\n","    return 9 * x * math.sin(x)\n","\n","def random_climbing():\n","    # Initial set\n","    local_maximum = -999\n","\n","    # Random number with 3 point precision, ex: 3.142\n","    random_number = random.uniform(0, 25)\n","    random_number = round(random_number, 3)\n","    random_point = f(random_number)\n","\n","    # Initiate pointer to navigate throughout equation\n","    current_number = random_number\n","    current_point = random_point\n","\n","    while current_point > local_maximum:\n","        local_maximum = current_point\n","\n","        # Check neighboring point\n","        next_neighbor = current_number + precision\n","        next_point = f(next_neighbor)\n","\n","        prev_neighbor = current_number - precision\n","        prev_point = f(prev_neighbor)\n","\n","        # Conditional to fit preset boundary 0 < x < 24\n","        if next_neighbor > 24:\n","            break\n","\n","        if prev_neighbor < 0:\n","            break\n","\n","        # Check and Set local maximum\n","        if (next_point > local_maximum):\n","            current_number = next_neighbor\n","            current_point = next_point\n","\n","        if (prev_point > local_maximum):\n","            current_number = prev_neighbor\n","            current_point = prev_point\n","\n","    return random_number, current_number, local_maximum\n","\n","def get_global_maximum():\n","    # Initial set for global maximum\n","    x = 0\n","    y = 0\n","\n","    for experiment in range(100):\n","        start_point, end_point, maximum = random_climbing()\n","\n","        # Check and Set global maximum\n","        if (maximum > y):\n","            x = end_point\n","            y = maximum\n","\n","    return x, y\n","\n","def experiment():\n","    for experiment in range(10):\n","        x, y = get_global_maximum()\n","        \n","        print(\"Global Maximum ( Experiment #\", experiment + 1, \") :\")\n","        print(\"X Value :\", x)\n","        print(\"Y Value :\", y)\n","        print()\n","\n","experiment()"],"execution_count":123,"outputs":[{"output_type":"stream","text":["Global Maximum ( Experiment # 1 ) :\n","X Value : 20.469000000003742\n","Y Value : 184.0030539337564\n","\n","Global Maximum ( Experiment # 2 ) :\n","X Value : 20.469000000003433\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 3 ) :\n","X Value : 20.46900000000348\n","Y Value : 184.0030539337564\n","\n","Global Maximum ( Experiment # 4 ) :\n","X Value : 20.469000000003778\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 5 ) :\n","X Value : 20.469000000002367\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 6 ) :\n","X Value : 20.469000000003447\n","Y Value : 184.0030539337564\n","\n","Global Maximum ( Experiment # 7 ) :\n","X Value : 20.469000000002886\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 8 ) :\n","X Value : 20.469000000003053\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 9 ) :\n","X Value : 20.469000000003142\n","Y Value : 184.00305393375638\n","\n","Global Maximum ( Experiment # 10 ) :\n","X Value : 20.46900000000369\n","Y Value : 184.00305393375638\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tgsD12wtMLeG","colab_type":"text"},"source":["# Analyze\n","\n","- Pada eksperimen ini dilakukan 10x percobaan untuk mendapatkan Global Maximum dari persamaan `9 * x * sin(x)`. Pada persamaan ini dibatasi sumbu x dengan jangka `0 - 24`. Pada grafik sendiri, dapat dilihat bahwa lokal maximum memiliki beberapa kemungkinan. Dengan metode hill climbing, dibuatkan sebuah algoritma untuk mencari titik tertinggi pada grafik ini. Titik tertinggi ditemukan pada x = 20.468 dan y = 184.003\n","\n","- Metode yang dilakukan didasari oleh metode Hill Climbing. Pada fungsi `random_climbing()` akan dilakukan inisialisasi untuk titik sembarang di X. Dengan titik sembarang tersebut, algoritma akan mengecek tetangga yang bersangkutan. Hal ini dibuat agar titik tetangga tersebut dapat dibandingkan dengan titik awal. Jika titik tetangga tersebut memiliki nilai Y yang lebih tinggi, maka algoritma akan mengambil titik tersebut sebagai local maksimum. Hal ini diulangi secara rekursif agar mendapatkan titik tertinggi di local tersebut.\n","\n","- Dalam mencari Global Maximum, metode Local Maximum dilakukan sebanyak 100x. Hal ini membuat kemungkinan untuk mendapatkan Global Maximum lebih tinggi. Dengan 100x percobaan, hasil percobaan dibandingkan lagi dengan keseluruhan. Perbandingan ini akan menghasilkan titik tertinggi yang dinamakan Global Maksimum.\n","\n","- Untuk melakukan validasi. Pencarian Global Maximum diulangi sebanyak 10x. Hal ini untuk validasi dan meminimalisir local maximum."]}]}